{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorMessage.ts","Api/comments.ts","utils/EmailValidation.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","Api/users.ts","Api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","onPostSelect","className","map","post","id","title","isSelected","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorMessage","client","addComment","comment","isValidEmail","newEmail","test","NewCommentForm","onAdd","initComment","postId","name","email","useState","setComment","isButtonLoading","setIsButtonLoading","isError","setIsError","isName","isEmail","isEmailValid","isBody","validationErrors","setValidationErrors","handleInputChange","event","target","value","errorName","toUpperCase","slice","length","prevState","createComment","a","isFormValid","trim","newComment","onSubmit","preventDefault","updatedValidation","htmlFor","placeholder","onChange","ADD","PostDetails","comments","isCommentsError","isLoading","isFormVisible","isDeleteError","onDelete","showForm","COMMENTS","href","DELETE","UserSelector","users","selectedUser","onUserSelect","isClicked","setIsClicked","role","user","App","setUsers","setSelectedUser","isUserLoading","setIsUserLoading","setPosts","setSelectedPost","setCcomments","isCommentsLoading","setIsCommentsLoading","setIsFormVisible","userError","postError","commentsError","deleteCommentError","apiErrors","setApiErrors","loadUsers","usersFromServer","loadPosts","userId","postsFromServer","loadComments","commentsFromServer","useEffect","USERS","POSTS","commentId","deletedId","filter","deleteComment","catch","prevComments","isForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae56a900.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  onPostSelect: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onPostSelect,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const { id, title } = post;\n            const isSelected = id === selectedPost?.id;\n\n            return (\n              <tr\n                key={id}\n                data-cy=\"Post\"\n              >\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link', {\n                        'is-light': !isSelected,\n                      },\n                    )}\n                    onClick={() => onPostSelect(post)}\n                  >\n                    {isSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  USERS = 'Unable to load users',\n  POSTS = 'Unable to load posts',\n  COMMENTS = 'Unable to load comments',\n  ADD = 'Can`t add a comment',\n  DELETE = 'Can`t delete a comment',\n}\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","export const isValidEmail = (newEmail: string) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  return emailRegex.test(newEmail);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../Api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { isValidEmail } from '../utils/EmailValidation';\nimport { ErrorMessage } from '../types/ErrorMessage';\n\ntype Props = {\n  selectedPost: Post | null\n  onAdd: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPost, onAdd }) => {\n  const initComment = {\n    postId: selectedPost?.id,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [comment, setComment] = useState(initComment);\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({\n    isName: true,\n    isEmail: true,\n    isEmailValid: true,\n    isBody: true,\n  });\n\n  const {\n    isName,\n    isEmail,\n    isEmailValid,\n    isBody,\n  } = validationErrors;\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    const errorName = `is${name[0].toUpperCase()}${name.slice(1, name.length)}`;\n\n    setComment((prevState) => ({ ...prevState, [name]: value }));\n    setValidationErrors((prevState) => ({ ...prevState, [errorName]: true }));\n    if (name === 'email') {\n      setValidationErrors(\n        (prevState) => ({ ...prevState, isEmailValid: true }),\n      );\n    }\n  };\n\n  const { name, email, body } = comment;\n\n  const clearForm = () => {\n    setValidationErrors({\n      isName: true,\n      isEmail: true,\n      isEmailValid: true,\n      isBody: true,\n    });\n    setComment(initComment);\n    setIsError(false);\n  };\n\n  const createComment = async () => {\n    const isFormValid = name.trim()\n      && isValidEmail(email)\n      && email.trim()\n      && body.trim();\n\n    try {\n      if (isFormValid) {\n        setIsButtonLoading(true);\n        const newComment = await addComment(comment);\n\n        onAdd(newComment);\n        setComment((prevState) => ({ ...prevState, body: '' }));\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsButtonLoading(false);\n    }\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsError(false);\n\n    const updatedValidation = {\n      isName: !!name.trim(),\n      isEmail: !!email.trim(),\n      isEmailValid: isValidEmail(email),\n      isBody: !!body.trim(),\n    };\n\n    setValidationErrors(updatedValidation);\n\n    if (isName && isEmail && isEmailValid && isBody) {\n      createComment();\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', {\n                'is-danger': !isName,\n              },\n            )}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {!isName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {!isName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input', {\n                'is-danger': !isEmail || !isEmailValid,\n              },\n            )}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {(!isEmail || !isEmailValid) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n        {!isEmailValid && isEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter Valid email\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', {\n                'is-danger': !isBody,\n              },\n            )}\n            onChange={handleInputChange}\n          />\n        </div>\n        {!isBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', {\n                'is-loading': isButtonLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          {ErrorMessage.ADD}\n        </div>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { ErrorMessage } from '../types/ErrorMessage';\n\ntype Props = {\n  selectedPost: Post | null;\n  comments: Comment[];\n  isCommentsError: boolean;\n  isLoading: boolean;\n  isFormVisible: boolean;\n  isDeleteError: boolean;\n  onDelete: (commentId: number) => void;\n  onAdd: (comment: Comment) => void;\n  showForm: (isForm: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isCommentsError,\n  isLoading,\n  isFormVisible,\n  isDeleteError,\n  onDelete,\n  onAdd,\n  showForm,\n}) => {\n  const showCommentForm = () => showForm(true);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n          {isCommentsError ? (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {ErrorMessage.COMMENTS}\n            </div>\n          ) : (\n            <>\n              {(!comments.length && !isLoading) && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n              {(comments.length > 0 && !isLoading) && (\n                <p className=\"title is-4\">Comments:</p>\n              )}\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={comment.email}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n              {isDeleteError && (\n                <div\n                  className=\"notification is-danger\"\n                  data-cy=\"PostsLoadingError\"\n                >\n                  {ErrorMessage.DELETE}\n                </div>\n              )}\n              {(!isLoading && !isFormVisible) && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={showCommentForm}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n        {isFormVisible && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            onAdd={onAdd}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  onUserSelect: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onUserSelect,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  const handleDropdownButton = () => setIsClicked(!isClicked);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownButton}\n        >\n\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isClicked && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item', {\n                    'is-active': user.id === selectedUser?.id,\n                  },\n                )}\n                onClick={() => {\n                  onUserSelect(user);\n                  setIsClicked(false);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './Api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './Api/posts';\nimport { deleteComment, getComments } from './Api/comments';\nimport { Comment } from './types/Comment';\nimport { ErrorMessage } from './types/ErrorMessage';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [isUserLoading, setIsUserLoading] = useState(true);\n\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [comments, setCcomments] = useState<Comment[]>([]);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [apiErrors, setApiErrors] = useState({\n    userError: false,\n    postError: false,\n    commentsError: false,\n    deleteCommentError: false,\n  });\n\n  const {\n    userError,\n    postError,\n    commentsError,\n    deleteCommentError,\n  } = apiErrors;\n\n  const deleteCommentFromList = (deletedId: number) => {\n    setCcomments(comments.filter(comment => comment.id !== deletedId));\n  };\n\n  const addCommentToList = (newComment: Comment) => {\n    setCcomments((prevComments) => [...prevComments, newComment]);\n  };\n\n  const removeComment = (commentId: number) => {\n    setApiErrors((prevState) => ({ ...prevState, deleteCommentError: false }));\n    deleteCommentFromList(commentId);\n    deleteComment(commentId)\n      .catch(() => {\n        setCcomments(comments);\n        setApiErrors(\n          (prevState) => ({ ...prevState, deleteCommentError: true }),\n        );\n      });\n  };\n\n  const handleSelectUser = (user: User) => {\n    if (selectedUser?.id !== user.id) {\n      setSelectedPost(null);\n    }\n\n    setSelectedUser(user);\n  };\n\n  const handleIsForm = (isForm: boolean) => {\n    setIsFormVisible(isForm);\n  };\n\n  const handleSelectPost = (post: Post | null) => {\n    if (selectedPost?.id === post?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n    setIsFormVisible(false);\n    setApiErrors((prevState) => ({ ...prevState, deleteCommentError: false }));\n  };\n\n  const loadUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setApiErrors((prevState) => ({ ...prevState, userError: true }));\n    }\n  };\n\n  const loadPosts = async () => {\n    if (selectedUser) {\n      setIsUserLoading(true);\n\n      setApiErrors((prevState) => ({ ...prevState, postError: false }));\n      try {\n        const postsFromServer = await getPosts(selectedUser.id);\n\n        setPosts(postsFromServer);\n      } catch {\n        setApiErrors((prevState) => ({ ...prevState, postError: true }));\n      } finally {\n        setIsUserLoading(false);\n      }\n    }\n  };\n\n  const loadComments = async () => {\n    if (selectedPost) {\n      setApiErrors((prevState) => ({ ...prevState, commentsError: false }));\n\n      setIsCommentsLoading(true);\n      setCcomments([]);\n\n      try {\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setCcomments(commentsFromServer);\n      } catch {\n        setApiErrors((prevState) => ({ ...prevState, commentsError: true }));\n      } finally {\n        setIsCommentsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadComments();\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onUserSelect={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {userError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {ErrorMessage.USERS}\n                  </div>\n                )}\n\n                {!selectedUser && !userError && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUser && (\n                  <>\n                    {isUserLoading && (\n                      <Loader />\n                    )}\n\n                    {postError ? (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        {ErrorMessage.POSTS}\n                      </div>\n                    ) : (\n                      <>\n                        {!isUserLoading && !posts?.length\n                            && (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            )}\n                        {!isUserLoading && !!posts?.length && (\n                          <PostsList\n                            posts={posts}\n                            selectedPost={selectedPost}\n                            onPostSelect={handleSelectPost}\n                          />\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isCommentsError={commentsError}\n                  isLoading={isCommentsLoading}\n                  isFormVisible={isFormVisible}\n                  isDeleteError={deleteCommentError}\n                  onDelete={removeComment}\n                  onAdd={addCommentToList}\n                  showForm={handleIsForm}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}